// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package list

import (
	"github.com/google/go-cmp/cmp/cmpopts"
	"google.golang.org/protobuf/testing/protocmp"
	"testing"

	"github.com/google/go-cmp/cmp"

	api "github.com/kubeflow/pipelines/backend/api/go_client"
	"github.com/stretchr/testify/assert"
)

var fakeModelFieldsBySortableAPIFields = map[string]string{
	"":            "Name",
	"name":        "Name",
	"author":      "Author",
	"description": "Description",
}

func TestParseAPIFilter_EmptyStringYieldsNilFilter(t *testing.T) {
	f, err := parseAPIFilter("")

	assert.Nil(t, err)
	assert.Nil(t, f)
}

func TestParseAPIFilter_InvalidStringYieldsError(t *testing.T) {
	f, err := parseAPIFilter("lkjlkjlkj")

	assert.NotNil(t, err)
	assert.Nil(t, f)
}

func TestParseAPIFilter_DecodesEncodedString(t *testing.T) {
	// in was generated by calling JSON.stringify followed by encodeURIComponent in
	// the browser on the following JSON string:
	//   {"predicates":[{"op":"EQUALS","key":"testkey","stringValue":"testvalue"}]}

	in := "%7B%22predicates%22%3A%5B%7B%22op%22%3A%22EQUALS%22%2C%22key%22%3A%22testkey%22%2C%22stringValue%22%3A%22testvalue%22%7D%5D%7D"

	// The above should correspond the following filter:
	want := &api.Filter{
		Predicates: []*api.Predicate{
			&api.Predicate{
				Key: "testkey", Op: api.Predicate_EQUALS,
				Value: &api.Predicate_StringValue{StringValue: "testvalue"},
			},
		},
	}

	got, err := parseAPIFilter(in)
	if !cmp.Equal(got, want, cmpopts.EquateEmpty(), protocmp.Transform()) || err != nil {
		t.Errorf("parseAPIString(%q) =\nGot %+v, %v\n Want %+v, <nil>\nDiff: %s",
			in, got, err, want, cmp.Diff(want, got))
	}
}

func TestValidatedListOptions_Errors(t *testing.T) {
	opts, err := NewOptions(&fakeListable{}, 10, "name asc", nil)
	if err != nil {
		t.Fatalf("list.NewOptions() = _, %+v; Want nil error", err)
	}

	npt, err := opts.NextPageToken(&fakeListable{})
	if err != nil {
		t.Fatalf("opt.NextPageToken() = _, %+v; Want nil error", err)
	}

	_, err = ValidatedListOptions(&fakeListable{}, npt, 10, "name asc", "")
	if err != nil {
		t.Fatalf("ValidatedListOptions(fakeListable, 10, \"name asc\") = _, %+v; Want nil error", err)
	}

	_, err = ValidatedListOptions(&fakeListable{}, npt, 10, "name desc", "")
	if err == nil {
		t.Fatalf("ValidatedListOptions(fakeListable, 10, \"name desc\") = _, %+v; Want error", err)
	}
}
