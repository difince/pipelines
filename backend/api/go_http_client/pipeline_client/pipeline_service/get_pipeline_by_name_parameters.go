// Code generated by go-swagger; DO NOT EDIT.

package pipeline_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPipelineByNameParams creates a new GetPipelineByNameParams object
// with the default values initialized.
func NewGetPipelineByNameParams() *GetPipelineByNameParams {
	var (
		resourceReferenceKeyTypeDefault = string("UNKNOWN_RESOURCE_TYPE")
	)
	return &GetPipelineByNameParams{
		ResourceReferenceKeyType: &resourceReferenceKeyTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPipelineByNameParamsWithTimeout creates a new GetPipelineByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPipelineByNameParamsWithTimeout(timeout time.Duration) *GetPipelineByNameParams {
	var (
		resourceReferenceKeyTypeDefault = string("UNKNOWN_RESOURCE_TYPE")
	)
	return &GetPipelineByNameParams{
		ResourceReferenceKeyType: &resourceReferenceKeyTypeDefault,

		timeout: timeout,
	}
}

// NewGetPipelineByNameParamsWithContext creates a new GetPipelineByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPipelineByNameParamsWithContext(ctx context.Context) *GetPipelineByNameParams {
	var (
		resourceReferenceKeyTypeDefault = string("UNKNOWN_RESOURCE_TYPE")
	)
	return &GetPipelineByNameParams{
		ResourceReferenceKeyType: &resourceReferenceKeyTypeDefault,

		Context: ctx,
	}
}

// NewGetPipelineByNameParamsWithHTTPClient creates a new GetPipelineByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPipelineByNameParamsWithHTTPClient(client *http.Client) *GetPipelineByNameParams {
	var (
		resourceReferenceKeyTypeDefault = string("UNKNOWN_RESOURCE_TYPE")
	)
	return &GetPipelineByNameParams{
		ResourceReferenceKeyType: &resourceReferenceKeyTypeDefault,
		HTTPClient:               client,
	}
}

/*GetPipelineByNameParams contains all the parameters to send to the API endpoint
for the get pipeline by name operation typically these are written to a http.Request
*/
type GetPipelineByNameParams struct {

	/*Name
	  The Name of the pipeline to be retrieved.

	*/
	Name string
	/*ResourceReferenceKeyID
	  The ID of the resource that referred to.

	*/
	ResourceReferenceKeyID *string
	/*ResourceReferenceKeyType
	  The type of the resource that referred to.

	*/
	ResourceReferenceKeyType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pipeline by name params
func (o *GetPipelineByNameParams) WithTimeout(timeout time.Duration) *GetPipelineByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pipeline by name params
func (o *GetPipelineByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pipeline by name params
func (o *GetPipelineByNameParams) WithContext(ctx context.Context) *GetPipelineByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pipeline by name params
func (o *GetPipelineByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pipeline by name params
func (o *GetPipelineByNameParams) WithHTTPClient(client *http.Client) *GetPipelineByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pipeline by name params
func (o *GetPipelineByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get pipeline by name params
func (o *GetPipelineByNameParams) WithName(name string) *GetPipelineByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get pipeline by name params
func (o *GetPipelineByNameParams) SetName(name string) {
	o.Name = name
}

// WithResourceReferenceKeyID adds the resourceReferenceKeyID to the get pipeline by name params
func (o *GetPipelineByNameParams) WithResourceReferenceKeyID(resourceReferenceKeyID *string) *GetPipelineByNameParams {
	o.SetResourceReferenceKeyID(resourceReferenceKeyID)
	return o
}

// SetResourceReferenceKeyID adds the resourceReferenceKeyId to the get pipeline by name params
func (o *GetPipelineByNameParams) SetResourceReferenceKeyID(resourceReferenceKeyID *string) {
	o.ResourceReferenceKeyID = resourceReferenceKeyID
}

// WithResourceReferenceKeyType adds the resourceReferenceKeyType to the get pipeline by name params
func (o *GetPipelineByNameParams) WithResourceReferenceKeyType(resourceReferenceKeyType *string) *GetPipelineByNameParams {
	o.SetResourceReferenceKeyType(resourceReferenceKeyType)
	return o
}

// SetResourceReferenceKeyType adds the resourceReferenceKeyType to the get pipeline by name params
func (o *GetPipelineByNameParams) SetResourceReferenceKeyType(resourceReferenceKeyType *string) {
	o.ResourceReferenceKeyType = resourceReferenceKeyType
}

// WriteToRequest writes these params to a swagger request
func (o *GetPipelineByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.ResourceReferenceKeyID != nil {

		// query param resource_reference_key.id
		var qrResourceReferenceKeyID string
		if o.ResourceReferenceKeyID != nil {
			qrResourceReferenceKeyID = *o.ResourceReferenceKeyID
		}
		qResourceReferenceKeyID := qrResourceReferenceKeyID
		if qResourceReferenceKeyID != "" {
			if err := r.SetQueryParam("resource_reference_key.id", qResourceReferenceKeyID); err != nil {
				return err
			}
		}

	}

	if o.ResourceReferenceKeyType != nil {

		// query param resource_reference_key.type
		var qrResourceReferenceKeyType string
		if o.ResourceReferenceKeyType != nil {
			qrResourceReferenceKeyType = *o.ResourceReferenceKeyType
		}
		qResourceReferenceKeyType := qrResourceReferenceKeyType
		if qResourceReferenceKeyType != "" {
			if err := r.SetQueryParam("resource_reference_key.type", qResourceReferenceKeyType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
